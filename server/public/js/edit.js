const editform=document.getElementById("edit-form"),editProjectsList=document.getElementById("edit-projects-list"),editError=document.getElementById("edit-error"),editSuccess=document.getElementById("edit-success"),editWarning=document.getElementById("edit-warning"),btnCreate=document.getElementById("btn-create"),btnEdit=document.getElementById("btn-edit"),btnSubmit=document.getElementById("btn-submit"),btnDelete=document.getElementById("btn-delete"),btnWarnintDelete=document.getElementById("btn-warnint-delete"),btnWarnintCancel=document.getElementById("btn-warnint-cancel"),projectId=document.getElementById("project-id"),projectName=document.getElementById("project-name"),projectDescription=document.getElementById("project-description"),githubUrl=document.getElementById("github-url"),siteUrl=document.getElementById("site-url"),techList=document.getElementById("tech-list"),radioStack=document.getElementById("radio-stack").children,authKey=document.getElementById("auth-key"),displayErr=e=>{editError.innerHTML=e,setTimeout((()=>{editError.innerHTML=""}),3e3)},displaySucc=e=>{editSuccess.innerHTML=e,setTimeout((()=>{editSuccess.innerHTML=""}),3e3)},editInputsValues=(e="",t="",i="",n="",r="",a="",c="")=>{projectId.value=e,projectName.value=t,projectDescription.value=i,githubUrl.value=n,siteUrl.value=r,techList.value=a,authKey.value="";for(let e of radioStack)"INPUT"===e.nodeName&&e.value===c&&(e.checked=!0)},getInputsData=()=>{let e=null;for(let t of radioStack)"INPUT"===t.nodeName&&t.checked&&(e=t.value);return{name:projectName.value,desc:projectDescription.value,git_url:githubUrl.value,site_url:siteUrl.value,tech:{tech_list:techList.value.split(","),stack:e}}},removeLiActive=()=>{for(let e of editProjectsList.children)e.classList.remove("li-active")},fetchAndDisplayProjects=async()=>{try{const e=await fetch("https://lg-portfolio-api.herokuapp.com/api/projects"),t=await e.json();for(let e of t.data){const t=document.createElement("li");t.classList.add("fs-small","fc-light"),t.innerText=e.name,t.addEventListener("click",(()=>{removeLiActive(),t.classList.add("li-active"),editInputsValues(e._id,e.name,e.desc,e.git_url,e.site_url,e.tech.tech_list,e.tech.stack)})),editProjectsList.appendChild(t)}}catch(e){console.error(e),displayErr(e.message)}};fetchAndDisplayProjects(),editform.addEventListener("submit",(async e=>{e.preventDefault();const t=getInputsData();if(console.log(t,authKey.value),t.name&&t.desc&&t.git_url&&t.site_url&&t.tech.tech_list&&t.tech.stack&&authKey.value)if(btnCreate.classList.contains("switch-btn-active"))try{const e=await fetch("https://lg-portfolio-api.herokuapp.com/api/projects/",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${authKey.value}`},body:JSON.stringify(t)}),i=await e.json();if(console.log(i),!i.success)throw new Error(i.error);changeBtn(btnCreate),displaySucc("Project Created!")}catch(e){console.error(e),displayErr(e.message)}else try{const e=await fetch(`https://lg-portfolio-api.herokuapp.com/api/projects/${projectId.value}`,{method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${authKey.value}`},body:JSON.stringify(t)}),i=await e.json();if(console.log(i),!i.success)throw new Error(i.error);changeBtn(btnCreate),displaySucc("Project Edited!")}catch(e){console.error(e),displayErr(e.message)}else displayErr("Please fill every field!")}));const changeBtn=e=>{"Create"===e.innerHTML.trim()?(btnCreate.classList.add("switch-btn-active"),btnEdit.classList.remove("switch-btn-active"),btnSubmit.firstElementChild.innerText="Create Project",btnDelete.style.display="none",editProjectsList.style.display="none",editInputsValues(),removeLiActive()):(btnCreate.classList.remove("switch-btn-active"),btnEdit.classList.add("switch-btn-active"),btnSubmit.firstElementChild.innerText="Edit Project",btnDelete.style.display="block",editProjectsList.style.display="flex")};btnCreate.addEventListener("click",(e=>{changeBtn(e.target)})),btnEdit.addEventListener("click",(e=>{changeBtn(e.target)})),btnDelete.addEventListener("click",(()=>{authKey.value?editWarning.style.display="flex":displayErr("Authorization field must be provided!")})),btnWarnintDelete.addEventListener("click",(async()=>{try{const e=await fetch(`https://lg-portfolio-api.herokuapp.com/api/projects/${projectId.value}`,{method:"DELETE",headers:{Authorization:`Bearer ${authKey.value}`}}),t=await e.json();if(!t.success)throw new Error(t.error);editWarning.style.display="none",changeBtn(btnCreate),displaySucc("Project Deleted!")}catch(e){console.error(e),displayErr(e.message)}})),btnWarnintCancel.addEventListener("click",(()=>{editWarning.style.display="none"}));